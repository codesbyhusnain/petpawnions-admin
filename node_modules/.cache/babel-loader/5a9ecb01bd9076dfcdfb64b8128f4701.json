{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar axios = require('axios');\n\nvar pkg = require('../../package.json');\n\nvar _require = require('@sendgrid/helpers'),\n    mergeData = _require.helpers.mergeData,\n    _require$classes = _require.classes,\n    Response = _require$classes.Response,\n    ResponseError = _require$classes.ResponseError;\n\nvar API_KEY_PREFIX = 'SG.';\nvar SENDGRID_BASE_URL = 'https://api.sendgrid.com/';\nvar TWILIO_BASE_URL = 'https://email.twilio.com/';\n\nvar Client = /*#__PURE__*/function () {\n  function Client() {\n    _classCallCheck(this, Client);\n\n    this.auth = '';\n    this.impersonateSubuser = '';\n    this.defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': 'sendgrid/' + pkg.version + ';nodejs'\n    };\n    this.defaultRequest = {\n      baseUrl: SENDGRID_BASE_URL,\n      url: '',\n      method: 'GET',\n      headers: {},\n      maxContentLength: Infinity,\n      // Don't limit the content length.\n      maxBodyLength: Infinity\n    };\n  }\n\n  _createClass(Client, [{\n    key: \"setApiKey\",\n    value: function setApiKey(apiKey) {\n      this.auth = 'Bearer ' + apiKey;\n      this.setDefaultRequest('baseUrl', SENDGRID_BASE_URL);\n\n      if (!this.isValidApiKey(apiKey)) {\n        console.warn(\"API key does not start with \\\"\".concat(API_KEY_PREFIX, \"\\\".\"));\n      }\n    }\n  }, {\n    key: \"setTwilioEmailAuth\",\n    value: function setTwilioEmailAuth(username, password) {\n      var b64Auth = Buffer.from(username + ':' + password).toString('base64');\n      this.auth = 'Basic ' + b64Auth;\n      this.setDefaultRequest('baseUrl', TWILIO_BASE_URL);\n\n      if (!this.isValidTwilioAuth(username, password)) {\n        console.warn('Twilio Email credentials must be non-empty strings.');\n      }\n    }\n  }, {\n    key: \"isValidApiKey\",\n    value: function isValidApiKey(apiKey) {\n      return this.isString(apiKey) && apiKey.trim().startsWith(API_KEY_PREFIX);\n    }\n  }, {\n    key: \"isValidTwilioAuth\",\n    value: function isValidTwilioAuth(username, password) {\n      return this.isString(username) && username && this.isString(password) && password;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString(value) {\n      return typeof value === 'string' || value instanceof String;\n    }\n  }, {\n    key: \"setImpersonateSubuser\",\n    value: function setImpersonateSubuser(subuser) {\n      this.impersonateSubuser = subuser;\n    }\n  }, {\n    key: \"setDefaultHeader\",\n    value: function setDefaultHeader(key, value) {\n      if (key !== null && typeof key === 'object') {\n        // key is an object\n        Object.assign(this.defaultHeaders, key);\n        return this;\n      }\n\n      this.defaultHeaders[key] = value;\n      return this;\n    }\n  }, {\n    key: \"setDefaultRequest\",\n    value: function setDefaultRequest(key, value) {\n      if (key !== null && typeof key === 'object') {\n        // key is an object\n        Object.assign(this.defaultRequest, key);\n        return this;\n      }\n\n      this.defaultRequest[key] = value;\n      return this;\n    }\n  }, {\n    key: \"createHeaders\",\n    value: function createHeaders(data) {\n      // Merge data with default headers.\n      var headers = mergeData(this.defaultHeaders, data); // Add auth, but don't overwrite if header already set.\n\n      if (typeof headers.Authorization === 'undefined' && this.auth) {\n        headers.Authorization = this.auth;\n      }\n\n      if (this.impersonateSubuser) {\n        headers['On-Behalf-Of'] = this.impersonateSubuser;\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"createRequest\",\n    value: function createRequest(data) {\n      var options = {\n        url: data.uri || data.url,\n        baseUrl: data.baseUrl,\n        method: data.method,\n        data: data.body,\n        params: data.qs,\n        headers: data.headers\n      }; // Merge data with default request.\n\n      options = mergeData(this.defaultRequest, options);\n      options.headers = this.createHeaders(options.headers);\n      options.baseURL = options.baseUrl;\n      delete options.baseUrl;\n      return options;\n    }\n  }, {\n    key: \"request\",\n    value: function request(data, cb) {\n      data = this.createRequest(data);\n      var promise = new Promise(function (resolve, reject) {\n        axios(data).then(function (response) {\n          return resolve([new Response(response.status, response.data, response.headers), response.data]);\n        }).catch(function (error) {\n          if (error.response) {\n            if (error.response.status >= 400) {\n              return reject(new ResponseError(error.response));\n            }\n          }\n\n          return reject(error);\n        });\n      }); // Throw an error in case a callback function was not passed.\n\n      if (cb && typeof cb !== 'function') {\n        throw new Error('Callback passed is not a function.');\n      }\n\n      if (cb) {\n        return promise.then(function (result) {\n          return cb(null, result);\n        }).catch(function (error) {\n          return cb(error, null);\n        });\n      }\n\n      return promise;\n    }\n  }]);\n\n  return Client;\n}();\n\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/@sendgrid/client/src/classes/client.js"],"names":["axios","require","pkg","mergeData","helpers","classes","Response","ResponseError","API_KEY_PREFIX","SENDGRID_BASE_URL","TWILIO_BASE_URL","Client","auth","impersonateSubuser","defaultHeaders","Accept","version","defaultRequest","baseUrl","url","method","headers","maxContentLength","Infinity","maxBodyLength","apiKey","setDefaultRequest","isValidApiKey","console","warn","username","password","b64Auth","Buffer","from","toString","isValidTwilioAuth","isString","trim","startsWith","value","String","subuser","key","Object","assign","data","Authorization","options","uri","body","params","qs","createHeaders","baseURL","cb","createRequest","promise","Promise","resolve","reject","then","response","status","catch","error","Error","result","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst axios = require('axios');\nconst pkg = require('../../package.json');\nconst {\n  helpers: {\n    mergeData,\n  },\n  classes: {\n    Response,\n    ResponseError,\n  },\n} = require('@sendgrid/helpers');\n\nconst API_KEY_PREFIX = 'SG.';\nconst SENDGRID_BASE_URL = 'https://api.sendgrid.com/';\nconst TWILIO_BASE_URL = 'https://email.twilio.com/';\n\nclass Client {\n  constructor() {\n    this.auth = '';\n    this.impersonateSubuser = '';\n\n    this.defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': 'sendgrid/' + pkg.version + ';nodejs',\n    };\n\n    this.defaultRequest = {\n      baseUrl: SENDGRID_BASE_URL,\n      url: '',\n      method: 'GET',\n      headers: {},\n      maxContentLength: Infinity, // Don't limit the content length.\n      maxBodyLength: Infinity,\n    };\n  }\n\n  setApiKey(apiKey) {\n    this.auth = 'Bearer ' + apiKey;\n    this.setDefaultRequest('baseUrl', SENDGRID_BASE_URL);\n\n    if (!this.isValidApiKey(apiKey)) {\n      console.warn(`API key does not start with \"${API_KEY_PREFIX}\".`);\n    }\n  }\n\n  setTwilioEmailAuth(username, password) {\n    const b64Auth = Buffer.from(username + ':' + password).toString('base64');\n    this.auth = 'Basic ' + b64Auth;\n    this.setDefaultRequest('baseUrl', TWILIO_BASE_URL);\n\n    if (!this.isValidTwilioAuth(username, password)) {\n      console.warn('Twilio Email credentials must be non-empty strings.');\n    }\n  }\n\n  isValidApiKey(apiKey) {\n    return this.isString(apiKey) && apiKey.trim().startsWith(API_KEY_PREFIX);\n  }\n\n  isValidTwilioAuth(username, password) {\n    return this.isString(username) && username\n      && this.isString(password) && password;\n  }\n\n  isString(value) {\n    return typeof value === 'string' || value instanceof String;\n  }\n\n  setImpersonateSubuser(subuser) {\n    this.impersonateSubuser = subuser;\n  }\n\n  setDefaultHeader(key, value) {\n    if (key !== null && typeof key === 'object') {\n      // key is an object\n      Object.assign(this.defaultHeaders, key);\n      return this;\n    }\n\n    this.defaultHeaders[key] = value;\n    return this;\n  }\n\n  setDefaultRequest(key, value) {\n    if (key !== null && typeof key === 'object') {\n      // key is an object\n      Object.assign(this.defaultRequest, key);\n      return this;\n    }\n\n    this.defaultRequest[key] = value;\n    return this;\n  }\n\n  createHeaders(data) {\n    // Merge data with default headers.\n    const headers = mergeData(this.defaultHeaders, data);\n\n    // Add auth, but don't overwrite if header already set.\n    if (typeof headers.Authorization === 'undefined' && this.auth) {\n      headers.Authorization = this.auth;\n    }\n\n    if (this.impersonateSubuser) {\n      headers['On-Behalf-Of'] = this.impersonateSubuser;\n    }\n\n    return headers;\n  }\n\n  createRequest(data) {\n    let options = {\n      url: data.uri || data.url,\n      baseUrl: data.baseUrl,\n      method: data.method,\n      data: data.body,\n      params: data.qs,\n      headers: data.headers,\n    };\n\n    // Merge data with default request.\n    options = mergeData(this.defaultRequest, options);\n    options.headers = this.createHeaders(options.headers);\n    options.baseURL = options.baseUrl;\n    delete options.baseUrl;\n\n    return options;\n  }\n\n  request(data, cb) {\n    data = this.createRequest(data);\n\n    const promise = new Promise((resolve, reject) => {\n      axios(data)\n        .then(response => {\n          return resolve([\n            new Response(response.status, response.data, response.headers),\n            response.data,\n          ]);\n        })\n        .catch(error => {\n          if (error.response) {\n            if (error.response.status >= 400) {\n              return reject(new ResponseError(error.response));\n            }\n          }\n          return reject(error);\n        });\n    });\n\n    // Throw an error in case a callback function was not passed.\n    if (cb && typeof cb !== 'function') {\n      throw new Error('Callback passed is not a function.');\n    }\n\n    if (cb) {\n      return promise\n        .then(result => cb(null, result))\n        .catch(error => cb(error, null));\n    }\n\n    return promise;\n  }\n}\n\nmodule.exports = Client;\n"]},"metadata":{},"sourceType":"script"}