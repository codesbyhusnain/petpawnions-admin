{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _classCallCheck = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('@sendgrid/client'),\n    Client = _require.Client;\n\nvar _require2 = require('@sendgrid/helpers'),\n    Mail = _require2.classes.Mail;\n/**\n * Mail service class\n */\n\n\nvar MailService = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function MailService() {\n    _classCallCheck(this, MailService);\n\n    // Set client, initialize substitution wrappers and secret rules filter.\n    this.setClient(new Client());\n    this.setSubstitutionWrappers('{{', '}}');\n    this.secretRules = [];\n  }\n  /**\n   * Set client\n   */\n\n\n  _createClass(MailService, [{\n    key: \"setClient\",\n    value: function setClient(client) {\n      this.client = client;\n      return this;\n    }\n    /**\n     * SendGrid API key passthrough for convenience.\n     */\n\n  }, {\n    key: \"setApiKey\",\n    value: function setApiKey(apiKey) {\n      this.client.setApiKey(apiKey);\n      return this;\n    }\n    /**\n     * Twilio Email Auth passthrough for convenience.\n     */\n\n  }, {\n    key: \"setTwilioEmailAuth\",\n    value: function setTwilioEmailAuth(username, password) {\n      this.client.setTwilioEmailAuth(username, password);\n    }\n    /**\n     * Set client timeout\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(timeout) {\n      if (typeof timeout === 'undefined') {\n        return;\n      }\n\n      this.client.setDefaultRequest('timeout', timeout);\n    }\n    /**\n     * Set substitution wrappers\n     */\n\n  }, {\n    key: \"setSubstitutionWrappers\",\n    value: function setSubstitutionWrappers(left, right) {\n      if (typeof left === 'undefined' || typeof right === 'undefined') {\n        throw new Error('Must provide both left and right side wrappers');\n      }\n\n      if (!Array.isArray(this.substitutionWrappers)) {\n        this.substitutionWrappers = [];\n      }\n\n      this.substitutionWrappers[0] = left;\n      this.substitutionWrappers[1] = right;\n      return this;\n    }\n    /**\n     * Set secret rules for filtering the e-mail content\n     */\n\n  }, {\n    key: \"setSecretRules\",\n    value: function setSecretRules(rules) {\n      if (!(rules instanceof Array)) {\n        rules = [rules];\n      }\n\n      var tmpRules = rules.map(function (rule) {\n        var ruleType = typeof rule;\n\n        if (ruleType === 'string') {\n          return {\n            pattern: new RegExp(rule)\n          };\n        } else if (ruleType === 'object') {\n          // normalize rule object\n          if (rule instanceof RegExp) {\n            rule = {\n              pattern: rule\n            };\n          } else if (rule.hasOwnProperty('pattern') && typeof rule.pattern === 'string') {\n            rule.pattern = new RegExp(rule.pattern);\n          }\n\n          try {\n            // test if rule.pattern is a valid regex\n            rule.pattern.test('');\n            return rule;\n          } catch (err) {// continue regardless of error\n          }\n        }\n      });\n      this.secretRules = tmpRules.filter(function (val) {\n        return val;\n      });\n    }\n    /**\n     * Check if the e-mail is safe to be sent\n     */\n\n  }, {\n    key: \"filterSecrets\",\n    value: function filterSecrets(body) {\n      if (typeof body === 'object' && !body.hasOwnProperty('content')) {\n        return;\n      }\n\n      var self = this;\n      body.content.forEach(function (data) {\n        self.secretRules.forEach(function (rule) {\n          if (rule.hasOwnProperty('pattern') && !rule.pattern.test(data.value)) {\n            return;\n          }\n\n          var message = \"The pattern '\".concat(rule.pattern, \"'\");\n\n          if (rule.name) {\n            message += \"identified by '\".concat(rule.name, \"'\");\n          }\n\n          message += ' was found in the Mail content!';\n          throw new Error(message);\n        });\n      });\n    }\n    /**\n     * Send email\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this = this;\n\n      var isMultiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var cb = arguments.length > 2 ? arguments[2] : undefined;\n\n      //Callback as second parameter\n      if (typeof isMultiple === 'function') {\n        cb = isMultiple;\n        isMultiple = false;\n      } //Array? Send in parallel\n\n\n      if (Array.isArray(data)) {\n        //Create promise\n        var promise = Promise.all(data.map(function (item) {\n          return _this.send(item, isMultiple);\n        })); //Execute callback if provided\n\n        if (cb) {\n          promise.then(function (result) {\n            return cb(null, result);\n          }).catch(function (error) {\n            return cb(error, null);\n          });\n        } //Return promise\n\n\n        return promise;\n      } //Send mail\n\n\n      try {\n        //Append multiple flag to data if not set\n        if (typeof data.isMultiple === 'undefined') {\n          data.isMultiple = isMultiple;\n        } //Append global substitution wrappers if not set in data\n\n\n        if (typeof data.substitutionWrappers === 'undefined') {\n          data.substitutionWrappers = this.substitutionWrappers;\n        } //Create Mail instance from data and get JSON body for request\n\n\n        var mail = Mail.create(data);\n        var body = mail.toJSON(); //Filters the Mail body to avoid sensitive content leakage\n\n        this.filterSecrets(body); //Create request\n\n        var request = {\n          method: 'POST',\n          url: '/v3/mail/send',\n          headers: mail.headers,\n          body: body\n        }; //Send\n\n        return this.client.request(request, cb);\n      } catch (error) {\n        //Pass to callback if provided\n        if (cb) {\n          // eslint-disable-next-line callback-return\n          cb(error, null);\n        } //Reject promise\n\n\n        return Promise.reject(error);\n      }\n    }\n    /**\n     * Send multiple emails (shortcut)\n     */\n\n  }, {\n    key: \"sendMultiple\",\n    value: function sendMultiple(data, cb) {\n      return this.send(data, true, cb);\n    }\n  }]);\n\n  return MailService;\n}(); //Export class\n\n\nmodule.exports = MailService;","map":{"version":3,"sources":["/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/@sendgrid/mail/src/classes/mail-service.js"],"names":["require","Client","Mail","classes","MailService","setClient","setSubstitutionWrappers","secretRules","client","apiKey","setApiKey","username","password","setTwilioEmailAuth","timeout","setDefaultRequest","left","right","Error","Array","isArray","substitutionWrappers","rules","tmpRules","map","rule","ruleType","pattern","RegExp","hasOwnProperty","test","err","filter","val","body","self","content","forEach","data","value","message","name","isMultiple","cb","promise","Promise","all","item","send","then","result","catch","error","mail","create","toJSON","filterSecrets","request","method","url","headers","reject","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst {Client} = require('@sendgrid/client');\nconst {classes: {Mail}} = require('@sendgrid/helpers');\n\n/**\n * Mail service class\n */\nclass MailService {\n\n  /**\n   * Constructor\n   */\n  constructor() {\n\n    // Set client, initialize substitution wrappers and secret rules filter.\n    this.setClient(new Client());\n    this.setSubstitutionWrappers('{{', '}}');\n    this.secretRules = [];\n  }\n\n  /**\n   * Set client\n   */\n  setClient(client) {\n    this.client = client;\n\n    return this;\n  }\n\n  /**\n   * SendGrid API key passthrough for convenience.\n   */\n  setApiKey(apiKey) {\n    this.client.setApiKey(apiKey);\n\n    return this;\n  }\n\n  /**\n   * Twilio Email Auth passthrough for convenience.\n   */\n  setTwilioEmailAuth(username, password) {\n    this.client.setTwilioEmailAuth(username, password);\n  }\n\n  /**\n   * Set client timeout\n   */\n  setTimeout(timeout) {\n    if (typeof timeout === 'undefined') {\n      return;\n    }\n\n    this.client.setDefaultRequest('timeout', timeout);\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(left, right) {\n    if (typeof left === 'undefined' || typeof right === 'undefined') {\n      throw new Error('Must provide both left and right side wrappers');\n    }\n    if (!Array.isArray(this.substitutionWrappers)) {\n      this.substitutionWrappers = [];\n    }\n    this.substitutionWrappers[0] = left;\n    this.substitutionWrappers[1] = right;\n\n    return this;\n  }\n\n  /**\n   * Set secret rules for filtering the e-mail content\n   */\n  setSecretRules(rules) {\n    if (!(rules instanceof Array)) {\n      rules = [rules];\n    }\n\n    const tmpRules = rules.map(function (rule) {\n      const ruleType = typeof rule;\n\n      if (ruleType === 'string') {\n        return {\n          pattern: new RegExp(rule),\n        };\n      } else if (ruleType === 'object') {\n        // normalize rule object\n        if (rule instanceof RegExp) {\n          rule = {\n            pattern: rule,\n          };\n        } else if (rule.hasOwnProperty('pattern')\n          && (typeof rule.pattern === 'string')\n        ) {\n          rule.pattern = new RegExp(rule.pattern);\n        }\n\n        try {\n          // test if rule.pattern is a valid regex\n          rule.pattern.test('');\n          return rule;\n        } catch (err) {\n          // continue regardless of error\n        }\n      }\n    });\n\n    this.secretRules = tmpRules.filter(function (val) {\n      return val;\n    });\n  }\n\n  /**\n   * Check if the e-mail is safe to be sent\n   */\n  filterSecrets(body) {\n    if ((typeof body === 'object') && !body.hasOwnProperty('content')) {\n      return;\n    }\n\n    const self = this;\n\n    body.content.forEach(function (data) {\n      self.secretRules.forEach(function (rule) {\n        if (rule.hasOwnProperty('pattern')\n          && !rule.pattern.test(data.value)\n        ) {\n          return;\n        }\n\n        let message = `The pattern '${rule.pattern}'`;\n\n        if (rule.name) {\n          message += `identified by '${rule.name}'`;\n        }\n\n        message += ' was found in the Mail content!';\n\n        throw new Error(message);\n      });\n    });\n  }\n\n  /**\n   * Send email\n   */\n  send(data, isMultiple = false, cb) {\n\n    //Callback as second parameter\n    if (typeof isMultiple === 'function') {\n      cb = isMultiple;\n      isMultiple = false;\n    }\n\n    //Array? Send in parallel\n    if (Array.isArray(data)) {\n\n      //Create promise\n      const promise = Promise.all(data.map(item => {\n        return this.send(item, isMultiple);\n      }));\n\n      //Execute callback if provided\n      if (cb) {\n        promise\n          .then(result => cb(null, result))\n          .catch(error => cb(error, null));\n      }\n\n      //Return promise\n      return promise;\n    }\n\n    //Send mail\n    try {\n\n      //Append multiple flag to data if not set\n      if (typeof data.isMultiple === 'undefined') {\n        data.isMultiple = isMultiple;\n      }\n\n      //Append global substitution wrappers if not set in data\n      if (typeof data.substitutionWrappers === 'undefined') {\n        data.substitutionWrappers = this.substitutionWrappers;\n      }\n\n      //Create Mail instance from data and get JSON body for request\n      const mail = Mail.create(data);\n      const body = mail.toJSON();\n\n      //Filters the Mail body to avoid sensitive content leakage\n      this.filterSecrets(body);\n\n      //Create request\n      const request = {\n        method: 'POST',\n        url: '/v3/mail/send',\n        headers: mail.headers,\n        body,\n      };\n\n      //Send\n      return this.client.request(request, cb);\n    } catch (error) {\n\n      //Pass to callback if provided\n      if (cb) {\n        // eslint-disable-next-line callback-return\n        cb(error, null);\n      }\n\n      //Reject promise\n      return Promise.reject(error);\n    }\n  }\n\n  /**\n   * Send multiple emails (shortcut)\n   */\n  sendMultiple(data, cb) {\n    return this.send(data, true, cb);\n  }\n}\n\n//Export class\nmodule.exports = MailService;\n"]},"metadata":{},"sourceType":"script"}