{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _slicedToArray = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar splitNameEmail = require('../helpers/split-name-email');\n/**\n * Email address class\n */\n\n\nvar EmailAddress = /*#__PURE__*/function () {\n  /**\n  * Constructor\n  */\n  function EmailAddress(data) {\n    _classCallCheck(this, EmailAddress);\n\n    //Construct from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * From data\n   */\n\n\n  _createClass(EmailAddress, [{\n    key: \"fromData\",\n    value: function fromData(data) {\n      //String given\n      if (typeof data === 'string') {\n        var _splitNameEmail = splitNameEmail(data),\n            _splitNameEmail2 = _slicedToArray(_splitNameEmail, 2),\n            _name = _splitNameEmail2[0],\n            _email = _splitNameEmail2[1];\n\n        data = {\n          name: _name,\n          email: _email\n        };\n      } //Expecting object\n\n\n      if (typeof data !== 'object') {\n        throw new Error('Expecting object or string for EmailAddress data');\n      } //Extract name and email\n\n\n      var _data = data,\n          name = _data.name,\n          email = _data.email; //Set\n\n      this.setEmail(email);\n      this.setName(name);\n    }\n    /**\n     * Set name\n     */\n\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      if (typeof name === 'undefined') {\n        return;\n      }\n\n      if (typeof name !== 'string') {\n        throw new Error('String expected for `name`');\n      }\n\n      this.name = name;\n    }\n    /**\n     * Set email (mandatory)\n     */\n\n  }, {\n    key: \"setEmail\",\n    value: function setEmail(email) {\n      if (typeof email === 'undefined') {\n        throw new Error('Must provide `email`');\n      }\n\n      if (typeof email !== 'string') {\n        throw new Error('String expected for `email`');\n      }\n\n      this.email = email;\n    }\n    /**\n    * To JSON\n    */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      //Get properties\n      var email = this.email,\n          name = this.name; //Initialize with mandatory properties\n\n      var json = {\n        email: email\n      }; //Add name if present\n\n      if (name !== '') {\n        json.name = name;\n      } //Return\n\n\n      return json;\n    }\n    /**************************************************************************\n     * Static helpers\n     ***/\n\n    /**\n     * Create an EmailAddress instance from given data\n     */\n\n  }], [{\n    key: \"create\",\n    value: function create(data) {\n      var _this = this;\n\n      //Array?\n      if (Array.isArray(data)) {\n        return data.filter(function (item) {\n          return !!item;\n        }).map(function (item) {\n          return _this.create(item);\n        });\n      } //Already instance of EmailAddress class?\n\n\n      if (data instanceof EmailAddress) {\n        return data;\n      } //Create instance\n\n\n      return new EmailAddress(data);\n    }\n  }]);\n\n  return EmailAddress;\n}(); //Export class\n\n\nmodule.exports = EmailAddress;","map":{"version":3,"sources":["/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/@sendgrid/helpers/classes/email-address.js"],"names":["splitNameEmail","require","EmailAddress","data","fromData","name","email","Error","setEmail","setName","json","Array","isArray","filter","item","map","create","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;;;;;;;AACA,IAAMA,cAAc,GAAGC,OAAO,CAAC,6BAAD,CAA9B;AAEA;AACA;AACA;;;IACMC,Y;AAEJ;AACF;AACA;AACE,wBAAYC,IAAZ,EAAkB;AAAA;;AAEhB;AACA,QAAIA,IAAJ,EAAU;AACR,WAAKC,QAAL,CAAcD,IAAd;AACD;AACF;AAED;AACF;AACA;;;;;WACE,kBAASA,IAAT,EAAe;AAEb;AACA,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,8BAAsBH,cAAc,CAACG,IAAD,CAApC;AAAA;AAAA,YAAOE,KAAP;AAAA,YAAaC,MAAb;;AACAH,QAAAA,IAAI,GAAG;AAACE,UAAAA,IAAI,EAAJA,KAAD;AAAOC,UAAAA,KAAK,EAALA;AAAP,SAAP;AACD,OANY,CAQb;;;AACA,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAM,IAAII,KAAJ,CAAU,kDAAV,CAAN;AACD,OAXY,CAab;;;AACA,kBAAsBJ,IAAtB;AAAA,UAAOE,IAAP,SAAOA,IAAP;AAAA,UAAaC,KAAb,SAAaA,KAAb,CAda,CAgBb;;AACA,WAAKE,QAAL,CAAcF,KAAd;AACA,WAAKG,OAAL,CAAaJ,IAAb;AACD;AAED;AACF;AACA;;;;WACE,iBAAQA,IAAR,EAAc;AACZ,UAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACD;;AACD,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,WAAKF,IAAL,GAAYA,IAAZ;AACD;AAED;AACF;AACA;;;;WACE,kBAASC,KAAT,EAAgB;AACd,UAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,WAAKD,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;;;;WACE,kBAAS;AAEP;AACA,UAAOA,KAAP,GAAsB,IAAtB,CAAOA,KAAP;AAAA,UAAcD,IAAd,GAAsB,IAAtB,CAAcA,IAAd,CAHO,CAKP;;AACA,UAAMK,IAAI,GAAG;AAACJ,QAAAA,KAAK,EAALA;AAAD,OAAb,CANO,CAQP;;AACA,UAAID,IAAI,KAAK,EAAb,EAAiB;AACfK,QAAAA,IAAI,CAACL,IAAL,GAAYA,IAAZ;AACD,OAXM,CAaP;;;AACA,aAAOK,IAAP;AACD;AAED;AACF;AACA;;AAEE;AACF;AACA;;;;WACE,gBAAcP,IAAd,EAAoB;AAAA;;AAElB;AACA,UAAIQ,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;AACvB,eAAOA,IAAI,CACRU,MADI,CACG,UAAAC,IAAI;AAAA,iBAAI,CAAC,CAACA,IAAN;AAAA,SADP,EAEJC,GAFI,CAEA,UAAAD,IAAI;AAAA,iBAAI,KAAI,CAACE,MAAL,CAAYF,IAAZ,CAAJ;AAAA,SAFJ,CAAP;AAGD,OAPiB,CASlB;;;AACA,UAAIX,IAAI,YAAYD,YAApB,EAAkC;AAChC,eAAOC,IAAP;AACD,OAZiB,CAclB;;;AACA,aAAO,IAAID,YAAJ,CAAiBC,IAAjB,CAAP;AACD;;;;KAGH;;;AACAc,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst splitNameEmail = require('../helpers/split-name-email');\n\n/**\n * Email address class\n */\nclass EmailAddress {\n\n  /**\n\t * Constructor\n\t */\n  constructor(data) {\n\n    //Construct from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * From data\n   */\n  fromData(data) {\n\n    //String given\n    if (typeof data === 'string') {\n      const [name, email] = splitNameEmail(data);\n      data = {name, email};\n    }\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object or string for EmailAddress data');\n    }\n\n    //Extract name and email\n    const {name, email} = data;\n\n    //Set\n    this.setEmail(email);\n    this.setName(name);\n  }\n\n  /**\n   * Set name\n   */\n  setName(name) {\n    if (typeof name === 'undefined') {\n      return;\n    }\n    if (typeof name !== 'string') {\n      throw new Error('String expected for `name`');\n    }\n    this.name = name;\n  }\n\n  /**\n   * Set email (mandatory)\n   */\n  setEmail(email) {\n    if (typeof email === 'undefined') {\n      throw new Error('Must provide `email`');\n    }\n    if (typeof email !== 'string') {\n      throw new Error('String expected for `email`');\n    }\n    this.email = email;\n  }\n\n  /**\n\t * To JSON\n\t */\n  toJSON() {\n\n    //Get properties\n    const {email, name} = this;\n\n    //Initialize with mandatory properties\n    const json = {email};\n\n    //Add name if present\n    if (name !== '') {\n      json.name = name;\n    }\n\n    //Return\n    return json;\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create an EmailAddress instance from given data\n   */\n  static create(data) {\n\n    //Array?\n    if (Array.isArray(data)) {\n      return data\n        .filter(item => !!item)\n        .map(item => this.create(item));\n    }\n\n    //Already instance of EmailAddress class?\n    if (data instanceof EmailAddress) {\n      return data;\n    }\n\n    //Create instance\n    return new EmailAddress(data);\n  }\n}\n\n//Export class\nmodule.exports = EmailAddress;\n"]},"metadata":{},"sourceType":"script"}