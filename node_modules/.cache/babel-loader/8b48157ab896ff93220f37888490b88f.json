{"ast":null,"code":"var _jsxFileName = \"/Users/husnainmehmood/Desktop/Work/petpawnions-admin/src/Components/RichText/RichText.js\";\nimport React from \"react\";\nimport { EditorState, Editor, getDefaultKeyBinding, RichUtils } from \"draft-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RichTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    this.focus = () => this.refs.editor.focus();\n\n    this.onChange = editorState => this.setState({\n      editorState\n    });\n\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n  }\n\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _mapKeyToEditorCommand(e) {\n    if (e.keyCode === 9\n    /* TAB */\n    ) {\n      const newEditorState = RichUtils.onTab(e, this.state.editorState, 4\n      /* maxDepth */\n      );\n\n      if (newEditorState !== this.state.editorState) {\n        this.onChange(newEditorState);\n      }\n\n      return;\n    }\n\n    return getDefaultKeyBinding(e);\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = \"RichEditor-editor\";\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\n        className += \" RichEditor-hidePlaceholder\";\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RichEditor-root\",\n      children: [/*#__PURE__*/_jsxDEV(BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        onClick: this.focus,\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          blockStyleFn: getBlockStyle,\n          customStyleMap: styleMap,\n          editorState: editorState,\n          handleKeyCommand: this.handleKeyCommand,\n          keyBindingFn: this.mapKeyToEditorCommand,\n          onChange: this.onChange,\n          placeholder: \"Tell a story...\",\n          ref: \"editor\",\n          spellCheck: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \"blockquote\":\n      return \"RichEditor-blockquote\";\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = \"RichEditor-styleButton\";\n\n    if (this.props.active) {\n      className += \" RichEditor-activeButton\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      children: this.props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: \"H1\",\n  style: \"header-one\"\n}, {\n  label: \"H2\",\n  style: \"header-two\"\n}, {\n  label: \"H3\",\n  style: \"header-three\"\n}, {\n  label: \"H4\",\n  style: \"header-four\"\n}, {\n  label: \"H5\",\n  style: \"header-five\"\n}, {\n  label: \"H6\",\n  style: \"header-six\"\n}, {\n  label: \"Blockquote\",\n  style: \"blockquote\"\n}, {\n  label: \"UL\",\n  style: \"unordered-list-item\"\n}, {\n  label: \"OL\",\n  style: \"ordered-list-item\"\n}, {\n  label: \"Code Block\",\n  style: \"code-block\"\n}];\n\nconst BlockStyleControls = props => {\n  const {\n    editorState\n  } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RichEditor-controls\",\n    children: BLOCK_TYPES.map(type => /*#__PURE__*/_jsxDEV(StyleButton, {\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    }, type.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BlockStyleControls;\nvar INLINE_STYLES = [{\n  label: \"Bold\",\n  style: \"BOLD\"\n}, {\n  label: \"Italic\",\n  style: \"ITALIC\"\n}, {\n  label: \"Underline\",\n  style: \"UNDERLINE\"\n}, {\n  label: \"Monospace\",\n  style: \"CODE\"\n}];\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RichEditor-controls\",\n    children: INLINE_STYLES.map(type => /*#__PURE__*/_jsxDEV(StyleButton, {\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style\n    }, type.label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = InlineStyleControls;\nexport default RichTextEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlockStyleControls\");\n$RefreshReg$(_c2, \"InlineStyleControls\");","map":{"version":3,"sources":["/Users/husnainmehmood/Desktop/Work/petpawnions-admin/src/Components/RichText/RichText.js"],"names":["React","EditorState","Editor","getDefaultKeyBinding","RichUtils","RichTextEditor","Component","constructor","props","state","editorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","e","keyCode","newEditorState","onTab","blockType","inlineStyle","render","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","style","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { EditorState, Editor, getDefaultKeyBinding, RichUtils } from \"draft-js\";\n\nclass RichTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { editorState: EditorState.createEmpty() };\n\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = (editorState) => this.setState({ editorState });\n\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n  }\n\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _mapKeyToEditorCommand(e) {\n    if (e.keyCode === 9 /* TAB */) {\n      const newEditorState = RichUtils.onTab(\n        e,\n        this.state.editorState,\n        4 /* maxDepth */\n      );\n      if (newEditorState !== this.state.editorState) {\n        this.onChange(newEditorState);\n      }\n      return;\n    }\n    return getDefaultKeyBinding(e);\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\n    );\n  }\n\n  render() {\n    const { editorState } = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = \"RichEditor-editor\";\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\n        className += \" RichEditor-hidePlaceholder\";\n      }\n    }\n\n    return (\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            keyBindingFn={this.mapKeyToEditorCommand}\n            onChange={this.onChange}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case \"blockquote\":\n      return \"RichEditor-blockquote\";\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = (e) => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = \"RichEditor-styleButton\";\n    if (this.props.active) {\n      className += \" RichEditor-activeButton\";\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  { label: \"H1\", style: \"header-one\" },\n  { label: \"H2\", style: \"header-two\" },\n  { label: \"H3\", style: \"header-three\" },\n  { label: \"H4\", style: \"header-four\" },\n  { label: \"H5\", style: \"header-five\" },\n  { label: \"H6\", style: \"header-six\" },\n  { label: \"Blockquote\", style: \"blockquote\" },\n  { label: \"UL\", style: \"unordered-list-item\" },\n  { label: \"OL\", style: \"ordered-list-item\" },\n  { label: \"Code Block\", style: \"code-block\" },\n];\n\nconst BlockStyleControls = (props) => {\n  const { editorState } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {BLOCK_TYPES.map((type) => (\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nvar INLINE_STYLES = [\n  { label: \"Bold\", style: \"BOLD\" },\n  { label: \"Italic\", style: \"ITALIC\" },\n  { label: \"Underline\", style: \"UNDERLINE\" },\n  { label: \"Monospace\", style: \"CODE\" },\n];\n\nconst InlineStyleControls = (props) => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map((type) => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default RichTextEditor;\n"]},"metadata":{},"sourceType":"module"}