{"ast":null,"code":"'use strict';\n/**\n * Dependencies\n */\n\nvar _classCallCheck = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar toCamelCase = require('../helpers/to-camel-case');\n\nvar toSnakeCase = require('../helpers/to-snake-case');\n\nvar deepClone = require('../helpers/deep-clone');\n\nvar fs = require('fs');\n\nvar path = require('path');\n/**\n * Attachment class\n */\n\n\nvar Attachment = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function Attachment(data) {\n    _classCallCheck(this, Attachment);\n\n    //Create from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n  /**\n   * From data\n   */\n\n\n  _createClass(Attachment, [{\n    key: \"fromData\",\n    value: function fromData(data) {\n      //Expecting object\n      if (typeof data !== 'object') {\n        throw new Error('Expecting object for Mail data');\n      } //Convert to camel case to make it workable, making a copy to prevent\n      //changes to the original objects\n\n\n      data = deepClone(data);\n      data = toCamelCase(data); //Extract properties from data\n\n      var _data = data,\n          content = _data.content,\n          filename = _data.filename,\n          type = _data.type,\n          disposition = _data.disposition,\n          contentId = _data.contentId,\n          filePath = _data.filePath;\n\n      if (typeof content !== 'undefined' && typeof filePath !== 'undefined') {\n        throw new Error(\"The props 'content' and 'filePath' cannot be used together.\");\n      } //Set data\n\n\n      this.setFilename(filename);\n      this.setType(type);\n      this.setDisposition(disposition);\n      this.setContentId(contentId);\n      this.setContent(filePath ? this.readFile(filePath) : content);\n    }\n    /**\n     * Read a file and return its content as base64\n     */\n\n  }, {\n    key: \"readFile\",\n    value: function readFile(filePath) {\n      return fs.readFileSync(path.resolve(filePath));\n    }\n    /**\n     * Set content\n     */\n\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      //Duck type check toString on content if it's a Buffer as that's the method that will be called.\n      if (typeof content === 'string') {\n        this.content = content;\n        return;\n      } else if (content instanceof Buffer && content.toString !== undefined) {\n        this.content = content.toString();\n\n        if (this.disposition === 'attachment') {\n          this.content = content.toString('base64');\n        }\n\n        return;\n      }\n\n      throw new Error('`content` expected to be either Buffer or string');\n    }\n    /**\n     * Set content\n     */\n\n  }, {\n    key: \"setFileContent\",\n    value: function setFileContent(content) {\n      if (content instanceof Buffer && content.toString !== undefined) {\n        this.content = content.toString('base64');\n        return;\n      }\n\n      throw new Error('`content` expected to be Buffer');\n    }\n    /**\n     * Set filename\n     */\n\n  }, {\n    key: \"setFilename\",\n    value: function setFilename(filename) {\n      if (typeof filename === 'undefined') {\n        return;\n      }\n\n      if (filename && typeof filename !== 'string') {\n        throw new Error('String expected for `filename`');\n      }\n\n      this.filename = filename;\n    }\n    /**\n     * Set type\n     */\n\n  }, {\n    key: \"setType\",\n    value: function setType(type) {\n      if (typeof type === 'undefined') {\n        return;\n      }\n\n      if (typeof type !== 'string') {\n        throw new Error('String expected for `type`');\n      }\n\n      this.type = type;\n    }\n    /**\n     * Set disposition\n     */\n\n  }, {\n    key: \"setDisposition\",\n    value: function setDisposition(disposition) {\n      if (typeof disposition === 'undefined') {\n        return;\n      }\n\n      if (typeof disposition !== 'string') {\n        throw new Error('String expected for `disposition`');\n      }\n\n      this.disposition = disposition;\n    }\n    /**\n     * Set content ID\n     */\n\n  }, {\n    key: \"setContentId\",\n    value: function setContentId(contentId) {\n      if (typeof contentId === 'undefined') {\n        return;\n      }\n\n      if (typeof contentId !== 'string') {\n        throw new Error('String expected for `contentId`');\n      }\n\n      this.contentId = contentId;\n    }\n    /**\n     * To JSON\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      //Extract properties from self\n      var content = this.content,\n          filename = this.filename,\n          type = this.type,\n          disposition = this.disposition,\n          contentId = this.contentId; //Initialize with mandatory properties\n\n      var json = {\n        content: content,\n        filename: filename\n      }; //Add whatever else we have\n\n      if (typeof type !== 'undefined') {\n        json.type = type;\n      }\n\n      if (typeof disposition !== 'undefined') {\n        json.disposition = disposition;\n      }\n\n      if (typeof contentId !== 'undefined') {\n        json.contentId = contentId;\n      } //Return\n\n\n      return toSnakeCase(json);\n    }\n  }]);\n\n  return Attachment;\n}(); //Export class\n\n\nmodule.exports = Attachment;","map":{"version":3,"sources":["/Users/husnainmehmood/Desktop/Work/React/PP-AdminWeb/node_modules/@sendgrid/helpers/classes/attachment.js"],"names":["toCamelCase","require","toSnakeCase","deepClone","fs","path","Attachment","data","fromData","Error","content","filename","type","disposition","contentId","filePath","setFilename","setType","setDisposition","setContentId","setContent","readFile","readFileSync","resolve","Buffer","toString","undefined","json","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Attachment class\n */\nclass Attachment {\n\n  /**\n   * Constructor\n   */\n  constructor(data) {\n\n    //Create from data\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * From data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data);\n\n    //Extract properties from data\n    const {\n      content,\n      filename,\n      type,\n      disposition,\n      contentId,\n      filePath,\n    } = data;\n\n    if ((typeof content !== 'undefined') && (typeof filePath !== 'undefined')) {\n      throw new Error(\n        \"The props 'content' and 'filePath' cannot be used together.\"\n      );\n    }\n\n    //Set data\n    this.setFilename(filename);\n    this.setType(type);\n    this.setDisposition(disposition);\n    this.setContentId(contentId);\n    this.setContent(filePath ? this.readFile(filePath) : content);\n  }\n\n  /**\n   * Read a file and return its content as base64\n   */\n  readFile(filePath) {\n    return fs.readFileSync(path.resolve(filePath));\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    //Duck type check toString on content if it's a Buffer as that's the method that will be called.\n    if (typeof content === 'string') {\n      this.content = content;\n      return;\n    } else if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString();\n\n      if (this.disposition === 'attachment') {\n        this.content = content.toString('base64');\n      }\n\n      return;\n    }\n\n    throw new Error('`content` expected to be either Buffer or string');\n  }\n\n  /**\n   * Set content\n   */\n  setFileContent(content) {\n    if (content instanceof Buffer && content.toString !== undefined) {\n      this.content = content.toString('base64');\n      return;\n    }\n\n    throw new Error('`content` expected to be Buffer');\n  }\n\n  /**\n   * Set filename\n   */\n  setFilename(filename) {\n    if (typeof filename === 'undefined') {\n      return;\n    }\n    if (filename && typeof filename !== 'string') {\n      throw new Error('String expected for `filename`');\n    }\n    this.filename = filename;\n  }\n\n  /**\n   * Set type\n   */\n  setType(type) {\n    if (typeof type === 'undefined') {\n      return;\n    }\n    if (typeof type !== 'string') {\n      throw new Error('String expected for `type`');\n    }\n    this.type = type;\n  }\n\n  /**\n   * Set disposition\n   */\n  setDisposition(disposition) {\n    if (typeof disposition === 'undefined') {\n      return;\n    }\n    if (typeof disposition !== 'string') {\n      throw new Error('String expected for `disposition`');\n    }\n    this.disposition = disposition;\n  }\n\n  /**\n   * Set content ID\n   */\n  setContentId(contentId) {\n    if (typeof contentId === 'undefined') {\n      return;\n    }\n    if (typeof contentId !== 'string') {\n      throw new Error('String expected for `contentId`');\n    }\n    this.contentId = contentId;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n\n    //Extract properties from self\n    const {content, filename, type, disposition, contentId} = this;\n\n    //Initialize with mandatory properties\n    const json = {content, filename};\n\n    //Add whatever else we have\n    if (typeof type !== 'undefined') {\n      json.type = type;\n    }\n    if (typeof disposition !== 'undefined') {\n      json.disposition = disposition;\n    }\n    if (typeof contentId !== 'undefined') {\n      json.contentId = contentId;\n    }\n\n    //Return\n    return toSnakeCase(json);\n  }\n}\n\n//Export class\nmodule.exports = Attachment;\n"]},"metadata":{},"sourceType":"script"}